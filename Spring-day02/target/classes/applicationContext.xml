<!-- Spring配置文件 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd 
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd 
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
	http://www.springframework.org/schema/data/jpa 
	http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util-3.2.xsd">
	    <!-- 1、实例化对象，默认对象为单例模式 
	     2、 scope:属性表示设置bean的作用域 
	       2.1、prototype：表示多例模式
	       2.2、singleton：表示单例模式 
		request session globle session -->
		<!-- 1、lazy-init:该属性表示bean是否延迟加载
		     2、默认是初始化容器的时候立即加载，
		         当lazy-init="true"的时候延迟加载（什么时候加载，什么时候调用，什么时候加载） -->
	<bean id="king" class="cn.tedu.sington.King" lazy-init="true"  scope="singleton"/>
	<!-- 1/实例化业务层对象  
	     2/property：表示给成员变量赋值（属性赋值）
	     3/ref:已经创建好的对象的id名  
	     4/name：表示属性名-->
	<bean id="userDao" class="cn.tedu.dao.UserDaoImpl" lazy-init="true"/>
	<bean id="userService" class="cn.tedu.service.UserServiceimple" lazy-init="true"><!-- 此处调用无参数的构造器 -->
	<!-- 相当于调用set方法 -->
	<property name="userDao" ref="userDao"/>
	</bean>
	<!-- 通过有参构造创建对象 -->
	<bean id="userService2" class="cn.tedu.service.UserServiceimple" lazy-init="true"><!-- 此处调用有参数的构造器 -->
	<!-- index=“0”：表示构造方法参数的索引（从0开始）   
	     ref=userDao:表示已经创建好的id,实现主键重用，    
	     constructor-arg：作用：表示使用构造方法给成员变量赋值 -->
	<constructor-arg index="0" ref="userDao"/>
	</bean>
	<!-- aoutwire:表示自动装配
	     byName:表示匹配属性名，完成依赖注入（UserserviceImpl 中有个属性id=userDao，byName方式赋值，就是去找id="userDao" 名字的实例化对象赋值） -->
	<bean id="userService3" class="cn.tedu.service.UserServiceimple" autowire="byName" lazy-init="true"/>
	<!-- byType:表示按属性类型匹配，实现依赖注入  ；如果一个对象有两个类型，使用byType会出现异常 -->
	<bean id="userService4" class="cn.tedu.service.UserServiceimple" autowire="byType"/>
   
</beans>
	